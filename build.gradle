apply plugin: "base"
archivesBaseName = "grails-docs-ja"
outputDir = "${buildDir.path}/docs"

explicitGrailsHome = System.getProperty("grails.home")
grailsHome = explicitGrailsHome ? file(explicitGrailsHome).absolutePath : "$checkOutDir/grails-src"

configurations {
    publish
}

repositories {
    mavenRepo urls: "http://download.java.net/maven/2/"
    mavenCentral()
    mavenRepo urls: "http://snapshots.repository.codehaus.org/"
}

dependencies {
    // Required while picking up grails-docs from dist dir.
    publish "org.grails:grails-gdoc-engine:1.0-SNAPSHOT", "org.codehaus.groovy:groovy:1.8.0"

    publish "org.slf4j:slf4j-log4j12:1.5.8",
            "org.xhtmlrenderer:core-renderer:R8",
            "org.yaml:snakeyaml:1.8"
}


task publishGuide(/*dependsOn:':grails-doc:publishGuide'*/){
   sourceDir = projectDir.path + "/src/ja"
   targetDir = outputDir
   workDir = buildDir
   
   doLast {
       // Create a class loader for the publication stuff.
       def classpath = project.configurations.publish
       classpath = classpath.files.collect { it.toURI().toURL() }

       // Add the grails-docs JAR.
       def distDir = file("${project.grailsHome}/dist")
       classpath << distDir.listFiles({ dir, name -> name ==~ /grails-docs-.*\.jar/ } as FilenameFilter)[0].toURI().toURL()
       project.publishClassLoader = new URLClassLoader(classpath as URL[], Thread.currentThread().contextClassLoader)

      def props = new Properties()
      new File("${projectDir}/grails-doc/resources/doc.properties").withInputStream {input ->
          props.load(input)
      }
      new File("${project.grailsHome}/build.properties").withInputStream {input ->
          props.load(input)
      }
      //loading props for translation
      def langProp = new ConfigSlurper().parse(new File("./src/ja/titles.groovy").getText('UTF-8'))
      props.title = langProp.props.title
      props.authors = props.authors + langProp.props.authors
      props.footer = props.footer + langProp.props.footer
      props.copyright = props.copyright + langProp.props.copyright
      
      def publisher = publishClassLoader.loadClass("grails.doc.DocPublisher").newInstance(file(sourceDir), file(targetDir))
      publisher.ant = ant
      publisher.workDir = workDir
      publisher.images = file("${projectDir}/grails-doc/resources/img")
      publisher.css = file("${projectDir}/grails-doc/resources/css")
      publisher.js = file("${projectDir}/grails-doc/resources/js")
      publisher.style = file("${projectDir}/grails-doc/resources/style")
      publisher.title = props.title
      publisher.version = props."grails.version"
      publisher.version = publisher.version + langProp.props.translatorMessage
      publisher.authors = props.authors
      publisher.copyright = props.copyright
      publisher.footer = props.footer
      publisher.logo = '<a href="http://grails.org" target="_blank"><img alt="Grails Logo" title="The Grails Framework" src="${path}/img/grails.png" border="0"/></a>'
      publisher.sponsorLogo = '<a href="http://springsource.com" target="_blank"><img alt="SpringSource Logo" title="SpringSource - Weapons for the War on Java Complexity" src="${path}/img/springsource-logo.png" border="0"/></a>'
      publisher.engineProperties = props

      // Add support for displaying the source code for GSP tags.
      def sourceMacro = publishClassLoader.loadClass("grails.doc.macros.GspTagSourceMacro")
      def searchDirs = file(project.grailsHome).listFiles().findAll {
          new File(it, "src/main/groovy/org/codehaus/groovy/grails").exists()
      }.collect {
          new File(it, "src/main/groovy/org/codehaus/groovy/grails")
      }

      publisher.registerMacro(sourceMacro.newInstance(searchDirs))

      // Radeox loads its bundles off the context class loader, which
      // unfortunately doesn't contain the grails-docs JAR. So, we
      // temporarily switch the DocPublisher class loader into the
      // thread so that the Radeox bundles can be found.
      def oldClassLoader = Thread.currentThread().contextClassLoader
      Thread.currentThread().contextClassLoader = publisher.getClass().classLoader

      publisher.publish()

      // Restore the old context class loader.
      Thread.currentThread().contextClassLoader = oldClassLoader
   }
}





