h1. joinTable

h2. Purpose

Customizes the join table used for undirectional one-to-many, many-to-many and primitive collection types.

h2. Examples

Basic collection type:

{code:java}
class Book {

    static hasMany = [chapterPageCounts: Integer]

    static mapping = {
        chapterPageCounts indexColumn: [name: "chapter_number", type: Integer],
                          joinTable: [column: "page_count"]

}
{code}

Enum collection types:

{code:java}
enum VehicleStatus { OFF, IDLING, ACCELERATING, DECELERATING }
{code}

{code:java}
class Truck {

    static hasMany = [states: VehicleStatus]

    static mapping = {
        states joinTable: [name: 'VEHICLE_STATUS_LOG',
                           key: 'TRUCK_ID', column: 'STATUS']
    }
}
{code}

Many-to-many:

{code:java}
class Book {

    String title

    static belongsTo = Author

    static hasMany = [authors: Author]

    static mapping = {
        authors joinTable: [name: "mm_author_books", key: 'mm_book_id' ]
    }
}
{code}

{code:java}
class Author {

    String name

    static hasMany = [books: Book]

    static mapping = {
        books joinTable: [name: "mm_author_books", key: 'mm_author_id']
    }
}
{code}

Unidirectional One-to-many:

{code:java}
class Employee {

    static hasMany = [projects: Project]

    static mapping = {
        projects joinTable: [name: 'EMP_PROJ',
                             column: 'PROJECT_ID',
                             key: 'EMPLOYEE_ID']
    }
}
{code}

{code:java}
class Project {  }
{code}

h2. Description

Usage: @association_name(joinTable:map)@

Arguments:

* @name@ - The table name
* @key@ (optional) - The foreign key
* @column@ (optional) - The inverse column

GORM has various strategies for mapping association types. Some of them, such as basic collection types and many-to-many associations, use a join table. You can customize how this join table is created using the @joinTable@ argument.
