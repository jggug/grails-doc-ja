{hidden}In a @Filters@ class, you can specify any other @Filters@ classes that should first be executed using the @dependsOn@ property. This is used when a @Filters@ class depends on the behavior of another @Filters@ class (e.g. setting up the environment, modifying the request/session, etc.) and is defined as an array of @Filters@ classes.{hidden}
@Filters@クラスでは、@dependsOn@プロパティに他の@Filters@クラスを定義して先に実行させることが可能です。この機能は@Filters@クラスが他の@Filters@クラスの振る舞いに依存する場合等に使用します。

{hidden}Take the following example @Filters@ classes:{hidden}
@Filters@クラスの例を見ていきましょう:

{code:java}
class MyFilters {
    def dependsOn = [MyOtherFilters]

    def filters = {
        checkAwesome(uri: "/*") {
            before = {
                if (request.isAwesome) { // do something awesome }
            }
        }

        checkAwesome2(uri: "/*") {
            before = {
                if (request.isAwesome) { // do something else awesome }
            }
        }
    }
}
{code}

{code:java}
class MyOtherFilters {
    def filters = {
        makeAwesome(uri: "/*") {
            before = {
                request.isAwesome = true
            }
        }
        doNothing(uri: "/*") {
            before = {
                // do nothing
            }
        }
    }
}
{code}

{hidden}MyFilters specifically @dependsOn@ MyOtherFilters.  This will cause all the filters in MyOtherFilters whose scope matches the current request to be executed before those in MyFilters. For a request of "/test", which will match the scope of every filter in the example, the execution order would be as follows:{hidden}
MyFiltersには、@dependsOn@にMyOtherFiltersを指定しています。これにより、リクエストがフィルタ範囲にマッチしたMyOtherFiltersのフィルタがMyFiltersの前に実行されます。この例では"/test"とリクエストした場合全てのフィルタにマッチします。フィルタ実行順は次のようになります:

* MyOtherFilters - makeAwesome
* MyOtherFilters - doNothing
* MyFilters - checkAwesome
* MyFilters - checkAwesome2

{hidden}The filters within the MyOtherFilters class are processed in order first, followed by the filters in the MyFilters class.  Execution order between @Filters@ classes are enabled and the execution order of filters within each @Filters@ class are preserved.{hidden}
MyOtherFiltersクラスのフィルタが先に実行されて、MyFiltersクラスのフィルタへと続きます。@Filters@クラスの実行順が可能になり、各@Filters@クラスのフィルタ実行順も保っています。

{hidden}If any cyclical dependencies are detected, the filters with cyclical dependencies will be added to the end of the filter chain and processing will continue.  Information about any cyclical dependencies that are detected will be written to the logs.  Ensure that your root logging level is set to at least WARN or configure an appender for the Grails Filters Plugin (@org.codehaus.groovy.grails.plugins.web.filters.FiltersGrailsPlugin@) when debugging filter dependency issues.{hidden}
循環依存関係を検出したら、循環依存関係のあるフィルタをフィルタチェインの最後に追加して処理を続行します。その後、循環依存関係を検出した事をログへ出力します。ログを出力するには、ルートロガーレベルがWARNに設定されFilers用のログ定義をする必要があります。
