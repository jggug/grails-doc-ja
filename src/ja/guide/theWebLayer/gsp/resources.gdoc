Grails 2.0 integrates with the [Resources plugin|http://grails.org/plugin/resources] to provide sophisticated static resource management. This plugin is installed by default in new Grails applications.

The basic way to include a link to a static resource in your application is to use the [resource|tags] tag. This simple approach creates a URI pointing to the file.

However modern applications with dependencies on multiple JavaScript and CSS libraries and frameworks (as well as dependencies on multiple Grails plugins) require something more powerful.

The issues that the Resources framework tackles are:

* Web application performance tuning is difficult
* Correct ordering of resources, and deferred inclusion of JavaScript
* Resources that depend on others that must be loaded first
* The need for a standard way to expose static resources in plugins and applications
* The need for an extensible processing chain to optimize resources
* Preventing multiple inclusion of the same resource

The plugin achieves this by introducing new artefacts and processing the resources using the server's local file system.

It adds artefacts for declaring resources, for declaring "mappers" that can process resources, and a servlet filter to serve processed resources.

What you get is an incredibly advanced resource system that enables you to easily create highly optimized web applications that run the same in development and in production.

The Resources plugin documentation provides a more detailed overview of the [concepts|http://grails-plugins.github.com/grails-resources/] which will be beneficial when reading the following guide.
