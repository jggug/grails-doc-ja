{hidden}One of the main issues with deploying a Grails application (or typically any servlet-based one) is that any change to the views requires that you redeploy your whole application. If all you want to do is fix a typo on a page, or change an image link, it can seem like a lot of unnecessary work. For such simple requirements, Grails does have a solution: the  @grails.gsp.view.dir@  configuration setting.{hidden}
Grailsアプリケーションをデプロイする際に起きる大きな問題の一つに(または他のサーブレットベースのアプリケーションも含む)、ビューを変更するたびにアプリケーション全体を再デプロイする必要がある事です。もし誤植や画像リンクの修正など有る場合は無駄な作業が発生します。そのような事を発生させないために、Grailsには、@grails.gsp.view.dir@定義という解決方法が存在します。

{hidden}How does this work? The first step is to decide where the GSP files should go. Let's say we want to keep them unpacked in a  @/var/www/grails/my-app@  directory. We add these two lines to  @grails-app/conf/Config.groovy@ :{hidden}
はじめに、何処にGSPを配置するかを決めましょう。@/var/www/grails/my-app@の階層はパックしないこととします。以下の2行を@grails-app/conf/Config.groovy@に追加します:

{code}
grails.gsp.enable.reload = true
grails.gsp.view.dir = "/var/www/grails/my-app/"
{code}
{hidden}The first line tells Grails that modified GSP files should be reloaded at runtime. If you don't have this setting, you can make as many changes as you like but they won't be reflected in the running application until you restart. The second line tells Grails where to load the views and layouts from.{hidden}
最初の行は変更されたGSPファイルはリロードするという指定です。この指定をしないと、GSPが更新されても再起動するまで反映されません。2行目は何処にあるビューとレイアウトをロードするかの指定です。

{note}
{hidden}The trailing slash on the  @grails.gsp.view.dir@  value is important! Without it, Grails will look for views in the parent directory.{hidden}
@grails.gsp.view.dir@の最後に付いているスラッシュは重要です。これが無いとGrailsが親ディレクトリにビューを探しに行きます。
{note}

{hidden}Setting "grails.gsp.view.dir" is optional. If it's not specified, you can update files directly to the application server's deployed war directory. Depending on the application server, these files might get overwritten when the server is restarted. Most application servers support "exploded war deployment" which is recommended in this case.{hidden}
"grails.gsp.view.dir"の設定は省略可能です。省略した場合はwarがデプロイされたディレクトリのファイルを変更できます。アプリケーションサーバによりますが、サーバのリスタート時にこれらのファイルは上書きされてしまいます。ホット再デプロイメントをサポートしたアプリケーションサーバの場合にのみ推奨します。

{hidden}With those settings in place, all you need to do is copy the views from your web application to the external directory. On a Unix-like system, this would look something like this:{hidden}
この場合に、サーバ内で設定をするには、Webアプリケーションのディレクトリから別のディレクトリへ全てのビューをコピーします。Unix系のシステムでは以下のように作業します:

{code}
mkdir -p /var/www/grails/my-app/grails-app/views
cp -R grails-app/views/* /var/www/grails/my-app/grails-app/views
{code}
{hidden}The key point here is that you must retain the view directory structure, including the  @grails-app/views@  bit. So you end up with the path  @/var/www/grails/my-app/grails-app/views/...@ .{hidden}
ポイントとなるのは、@grails-app/views@を含んだ全てのビューディレクトリ階層を持たなくてはならない所です。この場合だとパスは、@/var/www/grails/my-app/grails-app/views/...@となります。

{hidden}One thing to bear in mind with this technique is that every time you modify a GSP, it uses up permgen space. So at some point you will eventually hit "out of permgen space" errors unless you restart the server. So this technique is not recommended for frequent or large changes to the views.{hidden}
ひとつ気にかけてほしいのが、GSPを更新するたびに、permgenスペースを多く使用するという事です。それにより再起動するのと比べて、そのうち"out of permgen space"エラーが起こります。したがって、常に更新される物や、ビューへの大きな変更には推奨できません。

{hidden}There are also some System properties to control GSP reloading:{hidden}
GSPリロードをコントロールするシステムプロパティも提供しています:
{hidden}
{table}
*Name* | *Description* | *Default*
grails.gsp.enable.reload | altervative system property for enabling the GSP reload mode without changing Config.groovy |
grails.gsp.reload.interval | interval between checking the lastmodified time of the gsp source file, unit is milliseconds | 5000
grails.gsp.reload.granularity | the number of milliseconds leeway to give before deciding a file is out of date. this is needed because different roundings usually cause a 1000ms difference in lastmodified times | 1000
{table}
{hidden}
{table}
*名称* | *説明* | *既存値*
grails.gsp.enable.reload | Config.groovy変更せずにGSPリロードモードを許可にします。 |
grails.gsp.reload.interval | gspソースファイルの更新を確認するインターバル。ミリ秒で指定。 | 5000
grails.gsp.reload.granularity | ファイルが更新されたかを判断する時間のゆとり。ミリ秒で指定。 | 1000
{table}

{hidden}GSP reloading is supported for precompiled GSPs since Grails 1.3.5 .{hidden}
プリコンパイルGSPに対してのGSPリロードはGrails 1.3.5からサポートされています。
