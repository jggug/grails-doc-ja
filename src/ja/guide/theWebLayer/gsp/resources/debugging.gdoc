{hidden}When your resources are being moved around, renamed and otherwise mutated, it can be hard to debug client-side issues. Modern browsers, especially Safari, Chrome and Firefox have excellent tools that let you view all the resources requested by a page, including the headers and other information about them.{hidden}
リソースが、リソースフレームワークにより、動き回り、名称変更されたり、変更されるとクライアントサイドのデバッグが大変になります。最近のブラウザSafari,Chrome,Firefoxには、リクエストでのページの全てのリソースやヘッダーやその他の情報が閲覧できる優秀なツールがあります。

{hidden}There are several debugging features built in to the Resources framework.{hidden}
リソースフレームワークには、幾つかのデバッグ時に使用する機能を持ち合わせています。

h4. X-Grails-Resources-Original-Srcヘッダー {hidden}X-Grails-Resources-Original-Src Header {hidden}

{hidden}Every resource served in development mode will have the X-Grails-Resources-Original-Src: header added, indicating the original source file(s) that make up the response.{hidden}
開発(development)モードでのリソースには、レスポンスを構成した元のリソースファイルを示す、X-Grails-Resources-Original-Src:ヘッダーが追加されています。

h4. デバッグフラグを追加 {hidden}Adding the debug flag {hidden}

{hidden}If you add a query parameter *_debugResources=y* to your URL and request the page, Resources will bypass any processing so that you can see your original source files.{hidden}
クエリパラメータ *_debugResources=y* をURLに追加してページをリクエストすると、Resourcesプラグインはバイパスされて元のソースファイルを見ることができます。

{hidden}This also adds a unique timestamp to all your resource URLs, to defeat any caching that browsers may use. This means that you should always see your very latest code when you reload the page.{hidden}
さらにこの機能では、ユニークなタイムスタンプを全てのリソースに追加することでブラウザにキャッシュされるのを阻止します。したがってページをリロードするたびに最新のコードを参照することになります。

h4. 常にデバッグを有効にする {hidden}Turning on debug all the time {hidden}

{hidden}You can turn on the aforementioned debug mechanism without requiring a query parameter, but turning it on in Config.groovy:{hidden}
前途したデバッグ機能をクエリパラメータ無しで有効にするには、以下のようにConfig.groovyで設定します:

{code}
grails.resources.debug = true
{code}

{hidden}You can of course set this per-environment.{hidden}
もちろんこの設定は環境ごとに定義できます。
