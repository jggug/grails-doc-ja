Because a resource module can define the bundle groupings and other attributes of resources, you may find that the settings provided are not correct for your application.

For example, you may wish to bundle jQuery and some other libraries all together in one file. There is a load-time and caching trade-off here, but often it is the case that you'd like to override some of these settings.

To do this, the DSL supports an "overrides" clause, within which you can change the @defaultBundle@ setting for a module, or attributes of individual resources that have been declared with a unique id:

{code:java}
modules = {
    core {
        dependsOn 'jquery, utils'
        defaultBundle 'monolith'

        resource url: '/js/core.js', disposition: 'head'
        resource url: '/js/ui.js'
        resource url: '/css/main.css',
        resource url: '/css/branding.css'
        resource url: '/css/print.css', attrs: [media: 'print']
    }

    utils {
        dependsOn 'jquery'
        defaultBundle 'monolith'

        resource url: '/js/utils.js'
    }

    forms {
        dependsOn 'core,utils'
        defaultBundle 'monolith'

        resource url: '/css/forms.css'
        resource url: '/js/forms.js'
    }

    overrides {
        jquery {
            defaultBundle 'monolith'
        }
    }
}
{code}

This will put all code into a single bundle named 'monolith'. Note that this can still result in multiple files, as separate bundles are required for head and defer dispositions, and JavaScript and CSS files are bundled separately.

Note that overriding individual resources requires the original declaration to have included a unique id for the resource.

For full details of the resource DSL please see the [resources plugin documentation|http://grails-plugins.github.com/grails-resources].
