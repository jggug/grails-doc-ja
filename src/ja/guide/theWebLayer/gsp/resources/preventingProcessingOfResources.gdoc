{hidden}Sometimes you do not want a resource to be processed in a particular way, or even at all. Occasionally you may also want to disable all resource mapping.{hidden}
特定のリソースだけ変換処理を行わない事もあります。時折リソースマッピングを無効にしたいこともあります。

h4. 個々のリソースの特定のマッパー処理を防ぐ {hidden}Preventing the application of a specific mapper to an individual resource {hidden}

{hidden}All resource declarations support a convention of noXXXX:true where XXXX is a mapper name.{hidden}
全てのリソース宣言では、XXXXがマッパー名称とすると、noXXXX:trueのような規約に対応しています。

{hidden}So for example to prevent the "hashandcache" mapper from being applied to a resource (which renames and moves it, potentially breaking relative links written in JavaScript code), you would do this:{hidden}
例として、リソースに適用される"hashandcache"マッパーの処理を防ぐ場合は:

{code:java}
modules = {
    forms {
        resource url: '/css/forms.css', nohashandcache: true
        resource url: '/js/forms.js', nohashandcache: true
    }
}
{code}

h4. 特定のマッパーでの、パス、ファイルタイプの除外と包含 {hidden}Excluding/including paths and file types from specific mappers {hidden}

{hidden}Mappers have includes/excludes Ant patterns to control whether they apply to a given resource. Mappers set sensible defaults for these based on their activity, for example the zipped-resources plugin's "zip" mapper is set to exclude images by default.{hidden}
マッパーには、Antパターンで対象リソースを制御するincludes/excludes定義があります。各マッパーはそれぞれの動作に対応したふさわしいデフォルトをセットしています。例としてzipped-resourcesプラグインの"zip"マッパーはデフォルトで画像を除外する設定をしています。

{hidden}You can configure this in your @Config.groovy@ using the mapper name e.g:{hidden}
@Config.groovy@にマッパー名で定義することができます:

{code:java}
// We wouldn't link to .exe files using Resources but for the sake of example:
grails.resources.zip.excludes = ['**/*.zip', '**/*.exe']

// Perhaps for some reason we want to prevent bundling on "less" CSS files:
grails.resources.bundle.excludes = ['**/*.less']
{code}

{hidden}There is also an "includes" inverse. Note that settings these replaces the default includes/excludes for that mapper - it is not additive.{hidden}
逆の意味の"includes"も使用できます。設定をするとマッパーデフォルトのincludes/excludesを入れ換えるので注意が必要です。

h4. "ad-hoc"(レガシー)リソースとして扱う物の操作 {hidden}Controlling what is treated as an "ad-hoc" (legacy) resource {hidden}

{hidden}Ad-hoc resources are those undeclared, but linked to directly in your application *without* using the Grails or Resources linking tags (resource, img or external).{hidden}
"ad-hoc"リソースは、宣言されずGrailsまたResourcesのリンク系タグを使用しないで、直接アプリケーションにリンクされているリソースです。

{hidden}These may occur with some legacy plugins or code with hardcoded paths in.{hidden}
古い方式のプラグインやパスがコードに埋め込まれている場合をさします。

{hidden}There is a Config.groovy setting *grails.resources.adhoc.patterns* which defines a list of Servlet API compliant filter URI mappings, which the Resources filter will use to detect such "ad-hoc resource" requests.{hidden}
サーブレットAPI準拠のフィルタURIマッピングのリストを定義して、どのリクエストを"ad-hoc"リソースとしてResourcesのフィルタが使用するか認識させるConfig.groovy用の設定 *grails.resources.adhoc.patterns* があります。

{hidden}By default this is set to:{hidden}
デフォルトでは次のようにセットされています:
{code:java}
grails.resources.adhoc.patterns = ['images/*', '*.js', '*.css']
{code}
