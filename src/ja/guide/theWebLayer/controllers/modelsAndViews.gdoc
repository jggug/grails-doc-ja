h4. モデルを返す

{hidden}A model is a Map that the view uses when rendering. The keys within that Map correspond to variable names accessible by the view. There are a couple of ways to return a model. First, you can explicitly return a Map instance:{hidden}
モデルはビューをレンダリングする際に使用するMapインスタンスです。ビュー内でMapのキーに一致する変数名が使用できます。モデルを返すには、数種類の方法があります。先ずはじめにMapインスタンスを明示的に返す方法です。

{code:java}
def show() {
    [book: Book.get(params.id)]
}
{code}

{note}
{hidden}The above does _not_ reflect what you should use with the scaffolding views - see the [scaffolding section|guide:scaffolding] for more details.{hidden}
上記の例はスカッフォルドのビューで使用する例ではありません。スカッフォルドに関しては、スカッフォルドのセクションを参照してください。
{note}

{hidden}If no explicit model is returned the controller's properties will be used as the model, thus allowing you to write code like this:{hidden}
以下の例のように、明示的にモデルを返さない場合は、コントローラのプロパティがモデルとして使用されます。

{code:java}
class BookController {

    List books
    List authors

    def list() {
        books = Book.list()
        authors = Author.list()
    }
}
{code}

{note}
{hidden}This is possible due to the fact that controllers are prototype scoped. In other words a new controller is created for each request. Otherwise code such as the above would not be thread-safe, and all users would share the same data.{hidden}
これはコントローラのスコープがprototype(リクエスト毎にコントローラが生成される)の場合に可能な方法です。他の場合はスレッドセーフではありません。
{note}

{hidden}In the above example the @books@ and @authors@ properties will be available in the view.{hidden}
上記の例では、 プロパティの@book@と@authors@がビューで参照できます。

{hidden}A more advanced approach is to return an instance of the Spring [ModelAndView|api:org.springframework.web.servlet.ModelAndView] class:{hidden}
上級者向けのアプローチとしては、Springの[ModelAndView|api:org.springframework.web.servlet.ModelAndView]インスタンスを返す方法があります。

{code:java}
import org.springframework.web.servlet.ModelAndView

def index() {
    // get some books just for the index page, perhaps your favorites
    def favoriteBooks = ...

    // forward to the list view to show them
    return new ModelAndView("/book/list", [ bookList : favoriteBooks ])
}
{code}

{hidden}One thing to bear in mind is that certain variable names can not be used in your model:{hidden}
一つ覚えておいて欲しいのが、一定の変数名が、モデル使用できないという事です。

* @attributes@
* @application@

{hidden}Currently, no error will be reported if you do use them, but this will hopefully change in a future version of Grails.{hidden}
現状では使用したとしてもエラーが出ることはありませんが、将来的には変わるかもしれません。

h4. ビューの選択{hidden}Selecting the View {hidden}

{hidden}In both of the previous two examples there was no code that specified which [view|guide:gsp] to render. So how does Grails know which one to pick? The answer lies in the conventions. Grails will look for a view at the location @grails-app/views/book/show.gsp@ for this @list@ action:{hidden}
これまでの例ではビューがどのように設定されるのかを説明しませんでたが、Grailsではどのようにビューを選択しているのでしょうか？答えは慣習にあります。何も指定しなければ、以下のアクションでは、Grailsが自動的に、@grails-app/views/book/show.gsp@をビューとして使用します。

{code:java}
class BookController {
    def show() {
         [book: Book.get(params.id)]
    }
}
{code}

{hidden}To render a different view, use the [render|controllers] method:{hidden}
別のビューをレンダリングする場合は、[render|controllers]メソッドで指定します。

{code:java}
def show() {
    def map = [book: Book.get(params.id)]
    render(view: "display", model: map)
}
{code}

{hidden}In this case Grails will attempt to render a view at the location @grails-app/views/book/display.gsp@. Notice that Grails automatically qualifies the view location with the @book@ directory of the @grails-app/views@ directory. This is convenient, but to access shared views you need instead you can use an absolute path instead of a relative one:{hidden}
上記の例では、@grails-app/views/book/display.gsp@のレンダリングを試みます。注目する場所はGrailsは自動的にコントローラが@book@であれば、@grails-app/views@ディレクトリの@book@ディレクトリを、指定しなくても取得する所です。これは便利なのですが、ビューを共有する場合は、パスを指定する必要があります。

{code:java}
def show() {
    def map = [book: Book.get(params.id)]
    render(view: "/shared/display", model: map)
}
{code}

{hidden}In this case Grails will attempt to render a view at the location @grails-app/views/shared/display.gsp@.{hidden}
上記の例では、@grails-app/views/shared/display.gsp@のレンダリングを試みます。

{hidden}Grails also supports JSPs as views, so if a GSP isn't found in the expected location but a JSP is, it will be used instead.{hidden}
Grailsでは、ビューにJSPもサポートしています。これによって、参照したパスにGSPが存在しない場合は、JSPが代わりに使用されます。

h4. レスポンスのレンダリング

{hidden}Sometimes it's easier (for example with Ajax applications) to render snippets of text or code to the response directly from the controller. For this, the highly flexible @render@ method can be used:{hidden}
直接文字列をコントローラからレスポンス(例としてAjaxアプリケーションなど)したい場合、とてもフレキシブルな@render@メソッドを使うと簡単にできます。

{code:java}
render "Hello World!"
{code}

{hidden}The above code writes the text "Hello World!" to the response. Other examples include:{hidden}
上記の例ではレスポンスに"Hello World!"を返します。他の例として:

{code}
// マークアップを返す
render {
   for (b in books) {
      div(id: b.id, b.title)
   }
}
{code}

{code}
// 指定したビューをレンダリング
render(view: 'show')
{code}

{code}
// コレクションの中身をそれぞれ指定したテンプレートを適応してレンダリング
render(template: 'book_template', collection: Book.list())
{code}

{code}
// 文字列を指定したエンコーディングとコンテントタイプでレンダリング
render(text: "<xml>some xml</xml>", contentType: "text/xml", encoding: "UTF-8")
{code}

{hidden}If you plan on using Groovy's @MarkupBuilder@ to generate HTML for use with the @render@ method be careful of naming clashes between HTML elements and Grails tags, for example:{hidden}
@render@メソッドでGroovyの@MarkupBuilder@を使用してHTMLを生成する場合は、HTMLエレメント名とGrailsタグとの名称衝突を気をつけましょう。(Grailsのタグはアクション内部でメソッドとして使用できるため)

{code:java}
import groovy.xml.MarkupBuilder
...
def login() {
    def writer = new StringWriter()
    def builder = new MarkupBuilder(writer)
    builder.html {
        head {
            title 'Log in'
        }
        body {
            h1 'Hello'
            form {
            }
        }
    }

    def html = writer.toString()
    render html
}
{code}

{hidden}This will actually [call the form tag|guide:tagsAsMethodCalls] (which will return some text that will be ignored by the @MarkupBuilder@). To correctly output a @<form>@ element, use the following:{hidden}
上記の例ではformの場所にform[タグが呼ばれて|guide:tagsAsMethodCalls]しまいます。これを回避して@<form>@タグを正常に生成するには、以下のように@builder.form@とします。

{code:java}
def login() {
    // ...
    body {
        h1 'Hello'
        builder.form {
        }
    }
    // ...
}
{code}
