{hidden}Grails controllers support the concept of command objects. A command object is similar to a form bean in a framework like Struts, and they are useful for populating a subset of the properties needed to update a domain class. Or where there is no domain class required for the interaction, but you need features such as [data binding|guide:dataBinding] and [validation|guide:validation].{hidden}
Grailsのコマンドオブジェクトの設計概念をサポートしています。コマンドオブジェクトはStrutsでのフォームビーンと同じような物で、ドメインクラスで更新に必要なプロパティサブセットを収集するなどに使用すると便利です。または、[データバインディング|guide:dataBinding]と[バリデーション|guide:validation]を必要として、ドメインクラスを必要としない作用に使用します。

h4. コマンドオブジェクトの宣言 {hidden}Declaring Command Objects {hidden}

{hidden}Command objects are typically declared in the same source file as a controller, directly below the controller class definition. For example:{hidden}
コマンドオブジェクトは通常使用するコントローラと同じファイルに宣言します。例として:


{code:java}
class UserController {
    ...
}

class LoginCommand {
    String username
    String password

    static constraints = {
        username(blank: false, minSize: 6)
        password(blank: false, minSize: 6)
    }
}
{code}

{hidden}As this example shows, you can define [constraints|guide:constraints] in command objects just like in [domain classes|guide:GORM].{hidden}
この例では、[ドメインクラス|guide:GORM]と同じ[constraints|guide:constraints](制約)も定義しています。


h4. コマンドオブジェクトを使用する {hidden}Using Command Objects {hidden}

{hidden}To use command objects, controller actions may optionally specify any number of command object parameters. The parameter types must be supplied so that Grails knows what objects to create, populate and validate.{hidden}
コマンドオブジェクトを使用する際に、コントローラアクションに複数のコマンドオブジェクトパラメータを明記することができます。Grailsにどのオブジェクトを使用して、収集、バリデートするかを知らせるために、パラメータの型は必ず指定しましょう。

{hidden}Before the controller action is executed Grails will automatically create an instance of the command object class, populate its properties with by binding the request parameters, and validate the command object. For example:{hidden}
コントローラアクションが実行される前に、Grailsがコマンドオブジェクトのインスタンスを生成して、リクエストパラメータをバインドして、必要なプロパティを収集しコマンドオブジェクトでバリデートします。例として:

{code:java}
class LoginController {

    def login = { LoginCommand cmd ->
        if (cmd.hasErrors()) {
            redirect(action: 'loginForm')
            return
        }

        // work with the command object data
    }
}
{code}

{hidden}When using methods instead of Closures for actions, you can specify command objects in arguments:{hidden}
クロージャアクションでは無く、メソッドアクションの場合は引数として明記します:

{code:java}
class LoginController {
    def login(LoginCommand cmd) {
        if (cmd.hasErrors()) {
            redirect(action: 'loginForm')
            return
        }

        // work with the command object data
    }
}
{code}

h4. コマンドオブジェクトと依存注入 {hidden}Command Objects and Dependency Injection {hidden}

{hidden}Command objects can participate in dependency injection. This is useful if your command object has some custom validation logic uses Grails [services|guide:services]:{hidden}
コマンドオブジェクトに依存注入をすることが可能です。Grailsの[サービス|guide:services]を使用したカスタムバリデーションなどを使用する際に便利です:


{code}
class LoginCommand {

    def loginService

    String username
    String password

    static constraints = {
        username validator: { val, obj ->
            obj.loginService.canLogin(obj.username, obj.password)
        }
    }
}
{code}

{hidden}In this example the command object interacts with the @loginService@ bean which is injected by name from the Spring @ApplicationContext@.{hidden}
この例では、@loginService@をSpringの@ApplicatinContext@から名前解決でコマンドオブジェクトに注入しています。
