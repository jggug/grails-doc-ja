h4. renderメソッドでXMLを出力する {hidden}Using the render method to output XML {hidden}

{hidden}Grails supports a few different ways to produce XML and JSON responses. The first is the [render|controllers] method.{hidden}
GrailsにはXMLとJSONを生成する複数の方法があります。はじめに[render|controllers]メソッド。

{hidden}The @render@ method can be passed a block of code to do mark-up building in XML:{hidden}
@render@メソッドに、マークアップビルダーのコードブロックを渡してXML生成:

{code}
def list() {

    def results = Book.list()

    render(contentType: "text/xml") {
        books {
            for (b in results) {
                book(title: b.title)
            }
        }
    }
}
{code}

{hidden}The result of this code would be something like:{hidden}
このコードの結果は以下のようになります:

{code:xml}
<books>
    <book title="The Stand" />
    <book title="The Shining" />
</books>
{code}

{hidden}Be careful to avoid naming conflicts when using mark-up building. For example this code would produce an error:{hidden}
マークアップビルダーを使用する際は、変数名称の衝突を回避する必要があります。例として次のコードはエラーになります:

{code}
def list() {

    def books = Book.list()  // naming conflict here

    render(contentType: "text/xml") {
        books {
            for (b in results) {
                book(title: b.title)
            }
        }
    }
}
{code}

{hidden}This is because there is local variable @books@ which Groovy attempts to invoke as a method.{hidden}
この例では、Groovyがローカル変数のbooksをメソッドとして実行してしまいます。

h4. renderメソッドでJSONを出力する {hidden}Using the render method to output JSON {hidden}

{hidden}The @render@ method can also be used to output JSON:{hidden}
JSONを出力する場合も@render@メソッドが使用できます:

{code}
def list() {

    def results = Book.list()

    render(contentType: "text/json") {
        books = array {
            for (b in results) {
                book title: b.title
            }
        }
    }
}
{code}

{hidden}In this case the result would be something along the lines of:{hidden}
このコードの結果は以下のようになります:

{code}
[
    {title:"The Stand"},
    {title:"The Shining"}
]
{code}

{hidden}The same dangers with naming conflicts described above for XML also apply to JSON building.{hidden}
JSONビルダーもXMLと同じく、変数名称の衝突を回避する必要があります。

h4. 自動XMLマーシャリング {hidden}Automatic XML Marshalling {hidden}

{hidden}Grails also supports automatic marshalling of [domain classes|guide:GORM] to XML using special converters.{hidden}
Grailsでは[ドメインクラス|guide:GORM]から特別なコンバータを使用した自動マーシャリングをサポートしています。

{hidden}To start off with, import the @grails.converters@ package into your controller:{hidden}
使用するには、@grails.converters@パッケージをインポートする必要があります:

{code}
import grails.converters.*
{code}

{hidden}Now you can use the following highly readable syntax to automatically convert domain classes to XML:{hidden}
ドメインクラスをXMLに変換するのに、次のように見やすいシンタックスで記述できます:

{code}
render Book.list() as XML
{code}

{hidden}The resulting output would look something like the following::{hidden}
この例では次のような結果を出力します:

{code}
<?xml version="1.0" encoding="ISO-8859-1"?>
<list>
  <book id="1">
    <author>Stephen King</author>
    <title>The Stand</title>
  </book>
  <book id="2">
    <author>Stephen King</author>
    <title>The Shining</title>
  </book>
</list>
{code}

{hidden}An alternative to using the converters is to use the [codecs|guide:codecs] feature of Grails. The codecs feature provides [encodeAsXML|guide:codecs] and [encodeAsJSON|guide:codecs] methods:{hidden}
またconvertersを使用する別の方法としてGrailsの[codecs|guide:codecs]を使用することもできます。codecsでは、[encodeAsXML|guide:codecs]と[encodeAsJSON|guide:codecs]メソッドを提供しています:

{code}
def xml = Book.list().encodeAsXML()
render xml
{code}

{hidden}For more information on XML marshalling see the section on [REST|guide:REST]{hidden}
XMLマーシャリングの情報は[REST|guide:REST]のセクションも参照してください。

h4. 自動JSONマーシャリング {hidden}Automatic JSON Marshalling {hidden}

{hidden}Grails also supports automatic marshalling to JSON using the same mechanism. Simply substitute @XML@ with @JSON@:{hidden}
Grailsでは@XML@と同じ仕組みで、@JSON@の自動マーシャリングもサポートしています。単純に先の@XML@を@JSON@にするだけです

{code}
render Book.list() as JSON
{code}

{hidden}The resulting output would look something like the following:{hidden}
この例では次のような結果を出力します:

{code}
[
    {"id":1,
     "class":"Book",
     "author":"Stephen King",
     "title":"The Stand"},
    {"id":2,
     "class":"Book",
     "author":"Stephen King",
     "releaseDate":new Date(1194127343161),
     "title":"The Shining"}
 ]
{code}

{hidden}Again as an alternative you can use the @encodeAsJSON@ to achieve the same effect.{hidden}
もちろん、@encodeAsJSON@も同じ結果になります。
