h4. 使用可能なスコープ

{hidden}Scopes are hash-like objects where you can store variables. The following scopes are available to controllers:{hidden}
スコープは、変数を収納可能なハッシュのようなオブジェクトです。コントローラでは、次のスコープが使用可能です。
{hidden}
* [servletContext|controllers] - Also known as application scope, this scope lets you share state across the entire web application. The servletContext is an instance of [ServletContext|api:javax.servlet.ServletContext]
* [session|controllers] - The session allows associating state with a given user and typically uses cookies to associate a session with a client. The session object is an instance of [HttpSession|api:javax.servlet.http.HttpSession]
* [request|controllers] - The request object allows the storage of objects for the current request only. The request object is an instance of [HttpServletRequest|api:javax.servlet.http.HttpServletRequest]
* [params|controllers] - Mutable map of incoming request query string or POST parameters
* [flash|controllers] - See below
{hidden}

* [servletContext|controllers] - webアプリケーションの全体にわたってスコープを共有するアプリケーションスコープです。[ServletContext|api:javax.servlet.ServletContext]のインスタンスです。
* [session|controllers] - セッションは、通常クッキーを使用してリクエストを行ったクライアントとの連携をして、ステートを保持します。[HttpSession|api:javax.servlet.http.HttpSession]のインスタンスです。
* [request|controllers] - リクエストオブジェクトはリクエスト時のみオブジェクトを保持するオブジェクトです。[HttpServletRequest|api:javax.servlet.http.HttpServletRequest]のインスタンスです。
* [params|controllers] - 受け取ったリクエストクエリー文字列または、POSTパラメータを保持するミュータブルマップです。
* [flash|controllers] - 以下を参照


h4. スコープへのアクセス

{hidden}Scopes can be accessed using the variable names above in combination with Groovy's array index operator, even on classes provided by the Servlet API such as the [HttpServletRequest|api:javax.servlet.http.HttpServletRequest]:{hidden}
以下のようにスコープはGroovyの配列インデクスオペレータで、変数の名称を指定して参照することができます。[HttpServletRequest|api:javax.servlet.http.HttpServletRequest]にあるような、Servlet APIの提供する変数に関しても同じようにアクセスできます

{code:java}
class BookController {
    def find() {
        def findBy = params["findBy"]
        def appContext = request["foo"]
        def loggedUser = session["logged_user"]
    }
}
{code}

{hidden}You can also access values within scopes using the de-reference operator, making the syntax even more clear:{hidden}
フィールド参照オペレータを使用してスコープの変数を参照すれば、シンタックスもっと簡潔にすることもできます:

{code:java}
class BookController {
    def find() {
        def findBy = params.findBy
        def appContext = request.foo
        def loggedUser = session.logged_user
    }
}
{code}

{hidden}This is one of the ways that Grails unifies access to the different scopes.{hidden}
これはGrailsでの、様々なスコープにアクセスする一例です。

h4. フラッシュスコープを使用する

{hidden}Grails supports the concept of [flash|controllers] scope as a temporary store to make attributes available for this request and the next request only. Afterwards the attributes are cleared. This is useful for setting a message directly before redirecting, for example:{hidden}
Grailsは、今回のリクエストと次のリクエストのみで値を一時的に保持する [flash|controllers]スコープをサポートしています。保持された内容は自動的に削除されます。リダイレクト等を行う前にメッセージを残す時などに使用できます。以下が例です。

{code:java}
def delete() {
    def b = Book.get(params.id)
    if (!b) {
        flash.message = "User not found for id ${params.id}"
        redirect(action:list)
    }
    ... // remaining code
}
{code}

{hidden}When the @list@ action is requested, the @message@ value will be in scope and can be used to display an information message. It will be removed from the @flash@ scope after this second request.{hidden}
この例では、@delete@アクションに対してリクエストをすると、リダイレクトされて@list@アクションが実行された際に、flashスコープの@message@に代入した内容がメッセージ表示等に使用可能になります。このリダイレクトされた@list@アクション(@delete@の次のアクション)の処理が終了したら、@flash@スコープの内容が削除されます。

{hidden}Note that the attribute name can be anything you want, and the values are often strings used to display messages, but can be any object type.{hidden}
メッセージ表示などで文字列型が頻繁に使用されますが、flashスコープに一時的に保持する値は、どのようなオブジェクトでもかまいません。

h4. コントローラのスコープ設定

{hidden}By default, a new controller instance is created for each request. In fact, because the controller is @prototype@ scoped, it is thread-safe since each request happens on its own thread.{hidden}
デフォルトでは、コントローラはリクエスト毎にインスタンスが生成されます。コントローラのスコープは@prototype@になっているため、リクエストがそれぞれのスレッドを持っているので、スレッドセーフになります。

{hidden}You can change this behaviour by placing a controller in a particular scope. The supported scopes are:{hidden}
コントローラにスコープを指定することで振る舞いを変更できます。サポートされているスコープは:
{hidden}
* @prototype@ (default) - A new controller will be created for each request (recommended for actions as Closure properties)
* @session@ - One controller is created for the scope of a user session
* @singleton@ - Only one instance of the controller ever exists (recommended for actions as methods)
{hidden}
* @prototype@ (デフォルト) - リクエスト毎にコントローラが生成されます。(クロージャでアクションを推奨)
* @session@ - ユーザのセッションを通して1個のコントローラが生成されます。
* @singleton@ -  1個のコントローラのみが存在する状態です。(メソッドでのアクションをお勧めします)


{hidden}To enable one of the scopes, add a static @scope@ property to your class with one of the valid scope values listed above, for example{hidden}
スコープを定義するには、コントローラクラスに、static scope 変数で指定したいスコープを定義します。以下が例になります。

{code:java}
static scope = "singleton"
{code}

{hidden}You can define the default strategy under in @Config.groovy@ with the @grails.controllers.defaultScope@ key, for example:{hidden}
デフォルトスコープは、@Config.groovy@に@grails.controllers.defaultScope@を指定する事で変更できます。

{code:java}
grails.controllers.defaultScope = "singleton"
{code}
{hidden}
{note}
Use scoped controllers wisely. For instance, we don't recommend having any properties in a singleton-scoped controller since they will be shared for _all_ requests. Setting a default scope other than @prototype@ may also lead to unexpected behaviors if you have controllers provided by installed plugins that expect that the scope is @prototype@.
{note}
{hidden}
{note}
コントローラのスコープは使用状況を考えてお使いください。例えば、シングルトンのコントローラは、_全ての_リクエストで共有されるためプロパティを持つべきではありません。デフォルトで定義されているスコープの@prototype@ を変更することで、プラグインなどで提供されたコントローラが@protopype@を前提で実装されている場合があるので注意しましょう
{note}
