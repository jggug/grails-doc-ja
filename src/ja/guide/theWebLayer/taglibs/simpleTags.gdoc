{hidden}As demonstrated it the previous example it is easy to write simple tags that have no body and just output content. Another example is a @dateFormat@ style tag:{hidden}
前の説明で、簡単にコンテンツを出力するタグは簡単に記述できると説明しました。他の例として@dateFormat@タグを紹介します:

{code:java}
def dateFormat = { attrs, body ->
    out << new java.text.SimpleDateFormat(attrs.format).format(attrs.date)
}
{code}

{hidden}The above uses Java's @SimpleDateFormat@ class to format a date and then write it to the response. The tag can then be used within a GSP as follows:{hidden}
この例ではJavaの@SimpleDateFormat@クラスを使ってフォーマットした日付をレスポンスに出力します。このタグは、GSPで次のように使用します:


{code:xml}
<g:dateFormat format="dd-MM-yyyy" date="${new Date()}" />
{code}

{hidden}With simple tags sometimes you need to write HTML mark-up to the response. One approach would be to embed the content directly:{hidden}
単純なタグでHTMLマークアップをレスポンスすることもあるでしょう。一つのアプローチとして直接コンテンツを埋め込む事ができます:


{code:java}
def formatBook = { attrs, body ->
    out << "<div id=\"${attrs.book.id}\">"
    out << "Title : ${attrs.book.title}"
    out << "</div>"
}
{code}

{hidden}Although this approach may be tempting it is not very clean. A better approach would be to reuse the [render|tags] tag:{hidden}
上記の方法はあまりきれいでは無いので、実際には、[render|tags]タグを使用すると良いでしょう:

{code:java}
def formatBook = { attrs, body ->
    out << render(template: "bookTemplate", model: [book: attrs.book])
}
{code}

{hidden}And then have a separate GSP template that does the actual rendering.{hidden}
このようにして、実際に描写されるGSPテンプレートと切り離せます.
