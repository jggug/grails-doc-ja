{hidden}URL Mappings also support Grails' unified [validation constraints|guide:constraints] mechanism, which lets you further "constrain" how a URL is matched. For example, if we revisit the blog sample code from earlier, the mapping currently looks like this:{hidden}
URLマッピングでは、URLがマッチしてるか確認するために、[バリデーション制約|guide:constraints]が使用できます。例として、前と同じブログのサンプルを使用します:

{code:java}
static mappings = {
   "/$blog/$year?/$month?/$day?/$id?"(controller:"blog", action:"show")
}
{code}

{hidden}This allows URLs such as:{hidden}
以下のURLを許可します:

{code:java}
/graemerocher/2007/01/10/my_funky_blog_entry
{code}

{hidden}However, it would also allow:{hidden}
もちろんこのままでは、以下のようなURLも許可します:

{code:java}
/graemerocher/not_a_year/not_a_month/not_a_day/my_funky_blog_entry
{code}

{hidden}This is problematic as it forces you to do some clever parsing in the controller code. Luckily, URL Mappings can be constrained to further validate the URL tokens:{hidden}
これが許可されるといたずらされる危険性があります。ここで！URLマッピングに制約を定義してURLトークンをバリデートします:

{code:java}
"/$blog/$year?/$month?/$day?/$id?" {
     controller = "blog"
     action = "show"
     constraints {
          year(matches:/\\\d{4}/)
          month(matches:/\\\d{2}/)
          day(matches:/\\\d{2}/)
     }
}{code}

{hidden}In this case the constraints ensure that the @year@, @month@ and @day@ parameters match a particular valid pattern thus relieving you of that burden later on.{hidden}
この例では、@year@,@month@,@day@パラメータが特定のパターンにマッチするように制約を定義しています。
