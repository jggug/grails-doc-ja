Grails' URL mappings mechanism also supports wildcard mappings. For example consider the following mapping:

{code:java}
static mappings = {
    "/images/*.jpg"(controller: "image")
}
{code}

This mapping will match all paths to images such as @/image/logo.jpg@. Of course you can achieve the same effect with a variable:

{code:java}
static mappings = {
    "/images/$name.jpg"(controller: "image")
}
{code}

However, you can also use double wildcards to match more than one level below:

{code:java}
static mappings = {
    "/images/**.jpg"(controller: "image")
}
{code}

In this cases the mapping will match @/image/logo.jpg@ as well as @/image/other/logo.jpg@. Even better you can use a double wildcard variable:

{code:java}
static mappings = {
    // will match /image/logo.jpg and /image/other/logo.jpg
    "/images/$name**.jpg"(controller: "image")
}
{code}

In this case it will store the path matched by the wildcard inside a @name@ parameter obtainable from the [params|controllers] object:

{code:java}
def name = params.name
println name // prints "logo" or "other/logo"
{code}

If you use wildcard URL mappings then you may want to exclude certain URIs from Grails' URL mapping process. To do this you can provide an @excludes@ setting inside the @UrlMappings.groovy@ class:

{code:java}
class UrlMappings {
    static excludes = ["/images/*", "/css/*"]
    static mappings = {
        ...
    }
}
{code}

In this case Grails won't attempt to match any URIs that start with @/images@ or @/css@.
