{hidden}There are a number of different ways to implement Ajax which are typically broken down into:{hidden}
Ajaxを実装するには幾つかの方法があります。通常次のように分類できます:

{hidden}
* Content Centric Ajax - Where you just use the HTML result of a remote call to update the page
* Data Centric Ajax - Where you actually send an XML or JSON response from the server and programmatically update the page
* Script Centric Ajax - Where the server sends down a stream of JavaScript to be evaluated on the fly
{hidden}
* コンテント中心なAjax - リモートコールの結果HTMLページを更新する。
* データ中心なAjax - XMLまたはJSONをサーバから送信してページをプログラムで更新する。
* スクリプトを使用したAjax - サーバからJavascriptを送信して実行させる。

{hidden}Most of the examples in the [Ajax|guide:ajax] section cover Content Centric Ajax where you are updating the page, but you may also want to use Data Centric or Script Centric. This guide covers the different styles of Ajax.{hidden}
[Ajax|guide:ajax]セクションでの例のほとんどは、ページの更新を行うコンテント中心なAjaxを説明しました。データ中心やスクリプトを使用したAjaxも使用すると思います。このガイドでは他のスタイル尾Ajaxを解説します。

h4. コンテント中心のAjax {hidden}Content Centric Ajax {hidden}

{hidden}Just to re-cap, content centric Ajax involves sending some HTML back from the server and is typically done by rendering a template with the [render|controllers] method:{hidden}
同じ説明になりますが、コンテント中心のAjaxでの要件はHTMLをサーバから返す事です。通常この場合はテンプレートを[render|controllers]メソッドで描写して実装します:

{code:java}
def showBook() {
    def b = Book.get(params.id)

    render(template: "bookTemplate", model: [book: b])
}
{code}

{hidden}Calling this on the client involves using the [remoteLink|tags] tag:{hidden}
これをクライアント側で[remoteLink|tags]タグを使用して呼び出します:

{code:xml}
<g:remoteLink action="showBook" id="${book.id}"
              update="book${book.id}">Update Book</g:remoteLink>

<div id="book${book.id}">
   <!--existing book mark-up -->
</div>
{code}

h4. JSONを使用したデータ中心のAjax {hidden}Data Centric Ajax with JSON {hidden}

{hidden}Data Centric Ajax typically involves evaluating the response on the client and updating programmatically. For a JSON response with Grails you would typically use Grails' [JSON marshalling|guide:xmlAndJSON] capability:{hidden}
データ中心のAjaxでは、クライアントがレスポンスで取得した内容を評価してプログラムで更新をします。GrailsではJSONのレスポンスを返すには[JSONマーシャリング|guide:xmlAndJSON]を使用します:

{code:java}
import grails.converters.JSON

def showBook() {
    def b = Book.get(params.id)

    render b as JSON
}
{code}

{hidden}And then on the client parse the incoming JSON request using an Ajax event handler:{hidden}
クライアント側で取得したJSONをAjaxイベントハンドラを使って処理します:

{code:xml}
<g:javascript>
function updateBook(e) {
    var book = eval("("+e.responseText+")") // evaluate the JSON
    $("book" + book.id + "_title").innerHTML = book.title
}
<g:javascript>
<g:remoteLink action="test" update="foo" onSuccess="updateBook(e)">
    Update Book
</g:remoteLink>
<g:set var="bookId">book${book.id}</g:set>
<div id="${bookId}">
    <div id="${bookId}_title">The Stand</div>
</div>
{code}

h4. XMLを使用したデータ中心のAjax {hidden}Data Centric Ajax with XML {hidden}

{hidden}On the server side using XML is equally simple:{hidden}
サーバサイドでXMLをえお扱うのも簡単です:

{code:java}
import grails.converters.XML

def showBook() {
    def b = Book.get(params.id)

    render b as XML
}
{code}

{hidden}However, since DOM is involved the client gets more complicated:{hidden}
しかしクライアント側でのDOM操作は複雑になります:

{code:xml}
<g:javascript>
function updateBook(e) {
    var xml = e.responseXML
    var id = xml.getElementsByTagName("book").getAttribute("id")
    $("book" + id + "_title") = xml.getElementsByTagName("title")[0].textContent
}
<g:javascript>
<g:remoteLink action="test" update="foo" onSuccess="updateBook(e)">
    Update Book
</g:remoteLink>
<g:set var="bookId">book${book.id}</g:set>
<div id="${bookId}">
    <div id="${bookId}_title">The Stand</div>
</div>
{code}

h4. スクリプトを使用したAjax {hidden}Script Centric Ajax with JavaScript {hidden}

{hidden}Script centric Ajax involves actually sending JavaScript back that gets evaluated on the client. An example of this can be seen below:{hidden}
スクリプトを使用したAjaxは、Javascriptを返してクライアント側で動作(評価)させます。以下が例になります:

{code:java}
def showBook() {
    def b = Book.get(params.id)

    response.contentType = "text/javascript"
    String title = b.title.encodeAsJavascript()
    render "\$('book${b.id}_title')='${title}'"
}
{code}

{hidden}The important thing to remember is to set the @contentType@ to @text/javascript@. If you use Prototype on the client the returned JavaScript will automatically be evaluated due to this @contentType@ setting.{hidden}
重要な部分として@contentType@を@text/javascript@にすることを思えて起きましょう。Prototypeを使用した場合はこの@contentType@で自動的にJavaScriptを評価します。

{hidden}Obviously in this case it is critical that you have an agreed client-side API as you don't want changes on the client breaking the server. This is one of the reasons Rails has something like RJS. Although Grails does not currently have a feature such as RJS there is a [Dynamic JavaScript Plugin|http://grails.org/plugin/dynamic-javascript] that offers similar capabilities.{hidden}
当然このケースでは、クライアントがサーバを壊す事が無いと認めたクライアントサイトAPIでは無いと危険です。これがRailsではRJSを持っている理由です。Grailsには、RJSに相当する仕組みは存在しませんが、同じような内容の仕組みが [Dynamic JavaScript|http://grails.org/plugin/dynamic-javascript]プラグインで提供されています。

h4. AjaxとAjaxでない両方へのレスポンス {hidden}Responding to both Ajax and non-Ajax requests {hidden}

{hidden}It's straightforward to have the same Grails controller action handle both Ajax and non-Ajax requests. Grails adds the @isXhr()@ method to @HttpServletRequest@ which can be used to identify Ajax requests. For example you could render a page fragment using a template for Ajax requests or the full page for regular HTTP requests:{hidden}
AjaxとAjaxではないリクエストを同じコントローラアクションで処理ができます。Grailsでは、Ajaxリクエスト判別用に、@HttpServletRequest@に@isXhr()@メソッドを追加しています。例として、Ajaxリクエストの場合はテンプレートでページの一部を描写し、それ以外は全ページ描写を行う場合:

{code:java}
def listBooks() {
    def books = Book.list(params)
    if (request.xhr) {
        render template: "bookTable", model: [books: books]
    } else {
        render view: "list", model: [books: books]
    }
}
{code}
