{hidden}This is great, but usually you provide feedback to the user about what happened:{hidden}
先ほどの例で非同期送信を行いましたが、通常ユーザへ何が行われたかのフィードバックを提供する必要があります:

{code:java}
def delete() {
    def b = Book.get(params.id)
    b.delete()
    render "Book ${b.id} was deleted"
}
{code}

{hidden}GSP code:{hidden}
GSPコード:

{code:xml}
<div id="message"></div>
<g:remoteLink action="delete" id="1" update="message">
Delete Book
</g:remoteLink>
{code}

{hidden}The above example will call the action and set the contents of the @message@ @div@ to the response in this case @"Book 1 was deleted"@. This is done by the @update@ attribute on the tag, which can also take a Map to indicate what should be updated on failure:{hidden}
この例では対象のアクションをコールしてレスポンスを@messege@のidをもった@div@エレメントの内容を@"Book 1 was deleted"@に更新します。この更新動作は、タグの@update@属性で対象を指定しています。さらにMapを使用して更新失敗時の表示先も指定できます:


{code:xml}
<div id="message"></div>
<div id="error"></div>
<g:remoteLink update="[success: 'message', failure: 'error']"
              action="delete" id="1">
Delete Book
</g:remoteLink>
{code}

{hidden}Here the @error@ div will be updated if the request failed.{hidden}
この例ではリクエストに失敗すると、@error@のIDをもつdivタグ内が更新されます。
