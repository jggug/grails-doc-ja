{hidden}In the section on [start and end states|guide:startAndEndStates], the start state in the first example triggered a transition to the @enterPersonalDetails@ state. This state renders a view and waits for the user to enter the required information:{hidden}
[開始と終了ステート|guide:startAndEndStates]のセクションの中で、最初の例の開始ステートは@enterPersonalDetails@ステートへトリガーしています。このステートはビューを描写して、ユーザが必要な情報をエントリーするのを待ちます:

{code:java}
enterPersonalDetails {
   on("submit").to "enterShipping"
   on("return").to "showCart"
}
{code}

{hidden}The view contains a form with two submit buttons that either trigger the submit event or the return event:{hidden}
ビューは、submitイベントまたはreturnイベントをトリガーする、２つの送信ボタンを持つフォームを持っています:

{code:xml}
<g:form action="shoppingCart">
    <!-- Other fields -->
    <g:submitButton name="submit" value="Continue"></g:submitButton>
    <g:submitButton name="return" value="Back"></g:submitButton>
</g:form>
{code}

{hidden}However, what about the capturing the information submitted by the form? To to capture the form info we can use a flow transition action:{hidden}
フォームから送信された情報を取り込むには、トランジションアクションを使用します:

{code:java}
enterPersonalDetails {
   on("submit") {
      flow.person = new Person(params)
      !flow.person.validate() ? error() : success()
   }.to "enterShipping"
   on("return").to "showCart"
}
{code}

{hidden}Notice how we perform data binding from request parameters and place the @Person@ instance within @flow@ scope. Also interesting is that we perform [validation|guide:validation] and invoke the @error()@ method if validation fails. This signals to the flow that the transition should halt and return to the @enterPersonalDetails@ view so valid entries can be entered by the user, otherwise the transition should continue and go to the @enterShipping@ state.{hidden}
リクエストパラメータからデータバインディングを実行して、@flow@スコープの@Person@インスタンスに渡している部分を注目してください。さらに興味深い部分は、[バリデーション|guide:validation]を実行して、失敗したら@error()@メソッドを実行している部分です。この結果を受け取るとトランジションは停止され@enterPersonalDetails@ビューへ戻りユーザが正当な内容をエントリできるようになります。あるいは内容が問題無ければ、トランジションが続行されて@enterShipping@ステートへ移動します。

{hidden}Like regular actions, flow actions also support the notion of [Command Objects|guide:commandObjects] by defining the first argument of the closure:{hidden}
通常のアクションと同じく、フローアクションでは、クロージャの最初の引数を定義することで、[コマンドオブジェクト|guide:commandObjects]にも対応できます:

{code:java}
enterPersonalDetails {
   on("submit") { PersonDetailsCommand cmd ->
       flow.personDetails = cmd
      !flow.personDetails.validate() ? error() : success()
   }.to "enterShipping"
   on("return").to "showCart"
}
{code}
