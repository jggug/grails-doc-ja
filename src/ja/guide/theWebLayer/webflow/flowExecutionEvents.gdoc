{hidden}In order to _transition_ execution of a flow from one state to the next you need some way of trigger an _event_ that indicates what the flow should do next. Events can be triggered from either view states or action states.{hidden}
ステートから次のステートへのフローでの _トランジション_ 実行ができると、次のフローの _イベントトリガー_ を指定する方法が必要になります。ビューステートまたはアクションステートからイベントをトリガーできます。

h4. ビューステートからのイベントトリガー {hidden}Triggering Events from a View State{hidden}

{hidden}As discussed previously the start state of the flow in a previous code listing deals with two possible events. A @checkout@ event and a @continueShopping@ event:{hidden}
前のコードの例と同じく、フローの開始ステートには２つのイベントを与えます。@checkout@イベントと@continueShopping@イベントです:

{code:java}
def shoppingCartFlow = {
    showCart {
        on("checkout").to "enterPersonalDetails"
        on("continueShopping").to "displayCatalogue"
    }
    ...
}
{code}

{hidden}Since the @showCart@ event is a view state it will render the view @grails-app/book/shoppingCart/showCart.gsp@. Within this view you need to have components that trigger flow execution. On a form this can be done use the [submitButton|tags] tag:{hidden}
@shopCart@イベントはビューステートなので、@grails-app/book/shoppingCart/showCart.gsp@を描写します。このビューの中に、フロートリガーを実行するコンポーネントを持つ必要があります。 [submitButton|tags]タグを使用したフォームを使います:

{code:xml}
<g:form action="shoppingCart">
    <g:submitButton name="continueShopping" value="Continue Shopping" />
    <g:submitButton name="checkout" value="Checkout" />
</g:form>
{code}

{hidden}The form must submit back to the @shoppingCart@ flow. The name attribute of each [submitButton|tags] tag signals which event will be triggered. If you don't have a form you can also trigger an event with the [link|tags] tag as follows:{hidden}
フォームは@shoppingCart@フローへ送信するようにします。それぞれの[submitButton|tags]タグのname属性にトリガーするイベントを指定します。フォームを使用しない場合は、次のように[link|tags]タグをイベントトリガーに使用できます:

{code:xml}
<g:link action="shoppingCart" event="checkout" />{code}

h4. アクションからのイベントトリガー {hidden}Triggering Events from an Action{hidden}

{hidden}To trigger an event from an @action@ you invoke a method. For example there is the built in @error()@ and @success()@ methods. The example below triggers the @error()@ event on validation failure in a transition action:{hidden}
アクションからイベントをトリガーするには、メソッドを実行します。組込の@error()@と@success()@メソッド(トランジションアクション)が有るのでそれを例に使用します。次の例では、トランジションアクションでバリデーションが失敗したら@error()@イベントをトリガーしています:

{code:java}
enterPersonalDetails {
   on("submit") {
         def p = new Person(params)
         flow.person = p
         if (!p.validate()) return error()
   }.to "enterShipping"
   on("return").to "showCart"
}
{code}

{hidden}In this case because of the error the transition action will make the flow go back to the @enterPersonalDetails@ state.{hidden}
このケースでは、errorトランジションアクションにより、フローは@enterPersonalDetails@ステートに戻ります。

{hidden}With an action state you can also trigger events to redirect flow:{hidden}
アクションステートでは、リダイレクトフローへイベントをトリガーできます:

{code:java}
shippingNeeded {
   action {
       if (params.shippingRequired) yes()
       else no()
   }
   on("yes").to "enterShipping"
   on("no").to "enterPayment"
}{code}

