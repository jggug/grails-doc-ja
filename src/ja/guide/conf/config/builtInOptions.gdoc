Grails also provides the following configuration options:

* @grails.config.locations@  - The location of properties files or addition Grails Config files that should be merged with main configuration
* @grails.enable.native2ascii@ - Set this to false if you do not require native2ascii conversion of Grails i18n properties files
* @grails.views.default.codec@ - Sets the default encoding regime for GSPs - can be one of 'none', 'html', or 'base64' (default: 'none'). To reduce risk of XSS attacks, set this to 'html'.
* @grails.views.gsp.encoding@ - The file encoding used for GSP source files (default is 'utf-8')
* @grails.mime.file.extensions@ - Whether to use the file extension to dictate the mime type in [Content Negotiation|guide:contentNegotiation]
* @grails.mime.types@ - A map of supported mime types used for [Content Negotiation|guide:contentNegotiation]
* @grails.serverURL@ - A string specifying the server URL portion of absolute links, including server name e.g. grails.serverURL="http://my.yourportal.com". See [createLink|Tags].

h3. War generation

* @grails.project.war.file@ - Sets the name and location of the WAR file generated by the [war|commandLine] command
* @grails.war.dependencies@ - A closure containing Ant builder syntax or a list of JAR filenames. Lets you customise what libaries are included in the WAR file.
* @grails.war.copyToWebApp@ - A closure containing Ant builder syntax that is legal inside an Ant copy, for example "fileset()". Lets you control what gets included in the WAR file from the "web-app" directory.
* @grails.war.resources@ - A closure containing Ant builder syntax. Allows the application to do any other other work before building the final WAR file

For more information on using these options, see the section on [deployment|guide:deployment]
