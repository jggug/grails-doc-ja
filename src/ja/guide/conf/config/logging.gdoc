h4. ロギングの基礎

Grails uses its common configuration mechanism to configure the underlying "Log4j":http://logging.apache.org/log4j/1.2/index.html log system. To configure logging you must modify the file @Config.groovy@ located in the @grails-app/conf@ directory. 

This single @Config.groovy@ file allows you to specify separate logging configurations for @development@, @test@, and @production@ [environments|guide:environments]. Grails processes the @Config.groovy@ and configures Log4j appropriately.

Since 1.1 Grails provides a Log4j DSL, that you can use to configure Log4j an example of which can be seen below:

{code:java}
log4j = {
    error  'org.codehaus.groovy.grails.web.servlet',  //  controllers
	       'org.codehaus.groovy.grails.web.pages' //  GSP

    warn   'org.mortbay.log'
}
{code}

Essentially, each method translates into a log level and you can pass the names of the packages you want to log at that level as arguments to the method. 

Some useful loggers include:

* @org.codehaus.groovy.grails.commons@ - Core artefact information such as class loading etc.
* @org.codehaus.groovy.grails.web@ - Grails web request processing
* @org.codehaus.groovy.grails.web.mapping@ - URL mapping debugging
* @org.codehaus.groovy.grails.plugins@ - Log plugin activity
* @org.springframework@ - See what Spring is doing
* @org.hibernate@ - See what Hibernate is doing

h4. ルートロガー

The Root logger is the logger that all other loggers inherit from. You can configure the Root logger using the root method:

{code:java}
root {
    error()
    additivity = true
}
{code}

The above example configures the root logger to log messages at the error level and above to the default standard out appender. You can also configure the root logger to log to one or more named appenders:

{code:java}
appenders {
	file name:'file', file:'/var/logs/mylog.log'
}
root {
    debug 'stdout', 'file'
    additivity = true
}
{code}

Here the root logger will log to two appenders - the default 'stdout' appender and a 'file' appender.

You can also configure the root logger from the argument passed into the Log4J closure:
{code:java}
log4j = { root ->
    root.level = org.apache.log4j.Level.DEBUG
    ...
}
{code}
The closure argument "root" is an instance of  @org.apache.log4j.Logger@ , so refer to the API documentation for Log4J to find out what properties and methods are available to you.

h4. カスタムアペンダ

Using the Log4j you can define custom appenders. The following appenders are available by default:

* @jdbc@ - An appender that logs to a JDBC connection
* @console@ - An appender that logs to standard out
* @file@ - An appender that logs to a file
* @rollingFile@ - An appender that logs to rolling set of files

For example to configure a rolling file appender you can do:

{code:java}
log4j = {
	appenders {
		rollingFile name:"myAppender", maxFileSize:1024, file:"/tmp/logs/myApp.log"
	}
}
{code}

Each argument passed to the appender maps to a property of underlying [Appender|http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/Appender.html] class. The example above sets the @name@, @maxFileSize@ and @file@ properties of the [RollingFileAppender|http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/RollingFileAppender.html] class.

If you prefer to simply create the appender programmatically yourself, or you have your own appender implementation then you can simply call the @appender@ method and appender instance:


{code:java}
import org.apache.log4j.*

log4j = {
	appenders {
		appender new RollingFileAppender(name:"myAppender", maxFileSize:1024, file:"/tmp/logs/myApp.log")
	}
}
{code}

You can then log to a particular appender by passing the name as a key to one of the log level methods from the previous section:

{code:java}
error myAppender:"org.codehaus.groovy.grails.commons"
{code}



h4. カスタムレイアウト

By default the Log4j DSL assumes that you want to use a [PatternLayout|http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html]. However, there are other layouts available including:

* @xml@ - Create an XML log file	
* @html@ - Creates an HTML log file
* @simple@ - A simple textual log
* @pattern@ - A Pattern layout

You can specify custom patterns to an appender using the @layout@ setting:

{code:java}
log4j = {
	appenders {
        console name:'customAppender', layout:pattern(conversionPattern: '%c{2} %m%n')
    }
}
{code}

This also works for the built-in appender "stdout", which logs to the console:
{code:java}
log4j = {
    appenders {
        console name:'stdout', layout:pattern(conversionPattern: '%c{2} %m%n')
    }
}
{code}

h4. フルスタックトレース

When exceptions occur, there can be an awful lot of noise in the stacktrace from Java and Groovy internals. Grails filters these typically irrelevant details and restricts traces to non-core Grails/Groovy class packages.

When this happens, the full trace is always written to the @StackTrace@ logger. This logs to a file called @stacktrace.log@ - but you can change this in your @Config.groovy@ to do anything you like. For example if you prefer full stack traces to go to standard out you can add this line:

{code:java}
error stdout:"StackTrace"
{code}

You can completely disable stacktrace filtering by setting the @grails.full.stacktrace@ VM property to @true@:

{code:java}
grails -Dgrails.full.stacktrace=true run-app
{code}

h4. 規約によるロギング

[ドメインクラス|guide:GORM] 、 [コントローラ|guide:controllers] 、 タグライブラリ等の全てのアーティファクトに対して動的に @log@ プロパティが追加されています。以下が仕様例です。

{code:java}
def foo = "bar"
log.debug "The value of foo is $foo"
{code}

ログ名称は規約により、 @grails.app.<アーティファクト種類>.ClassName@ になります。以下が様々なGrailsアーティファクトのログ定義をした仕様例です。

{code:java}
log4j = {
	// 全てのアーティファクトにレベルを設定
	info "grails.app"
	// コントローラを指定して設定
	debug "grails.app.controller.YourController"
	// ドメインクラスを指定して設定
	debug "grails.app.domain.Book"
	// 全てのタグライブラリに対して設定
	info "grails.app.tagLib"
	
}
{code}

アーティファクト名称は規約により指定します。以下は一例です。
* @bootstrap@ - For bootstrap classes
* @dataSource@ - For data sources
* @tagLib@ - For tag libraries
* @service@ - For service classes
* @controller@ - For controllers
* @domain@ - For domain entities
