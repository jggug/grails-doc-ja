Grails supports Internationalization (i18n) out of the box through the underlying Spring MVC support for internationalization. With Grails you are able to customize the text that appears in any view based on the users Locale. To quote the javadoc for the [Locale|api:java.util.Locale] class in Java:

Grailsの国際化対応(i18n)は、
Spring MVC support for internationalization を通して実現しています。
ユーザ指定のロケール別にテキストをカスタマイズできます。
ロケールについてJavadocから以下に引用します:

{quote}
A Locale object represents a specific geographical, political, or cultural region. An operation that requires a Locale to perform its task is called locale-sensitive and uses the Locale  to tailor information for the user. For example, displaying a number is a locale-sensitive operation--the number should be formatted according to the customs/conventions of the user's native country, region, or culture.

Locale オブジェクトは、特定の地理的、国家的、または文化的地域を表すためのものです。ある操作で Locale を必要とするタスクがある場合、その操作をロケールに依存する操作といいます。この場合、情報は Locale によりユーザに合わせて調整されます。たとえば、数値を表示するのは、ロケールに依存する操作です。この数値は、ユーザの国や地域、文化の習慣や規則に従ってフォーマットする必要があります。 
{quote}

A Locale is made up of a [language code|http://www.loc.gov/standards/iso639-2/englangn.html]
and a [country code|http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html]. For example "en_US" is the code for US english, whilst "en_GB" is the for British English.

ロケールは[言語コード|http://www.loc.gov/standards/iso639-2/englangn.html]と[国コード|http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html]で構成されます。
例えば、"en_US" は アメリカ + 英語、
"en_GB" は 英国 + 英語です。
