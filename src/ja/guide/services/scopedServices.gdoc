By default, access to service methods is not synchronised, so nothing prevents concurrent execution of those methods. In fact, because the service is a singleton and may be used concurrently, you should be very careful about storing state in a service. Or take the easy (and better) road and never store state in a service.

You can change this behaviour by placing a service in a particular scope. The supported scopes are:

* @prototype@ - クラスへの注入時にサービスが生成される
* @request@ - リクエスト毎にサービスが生成される
* @flash@ - 現在とその次のリクエスト用にサービスが生成される
* @flow@ - フローの開始から終了まてのサービス(サブフロー含まず)
* @conversation@ - フローの開始から終了まてのサービス(サブフロー含む)
* @session@ - ユーザセッション毎にサービスが生成される
* @singleton@ (デフォルト) - サービスが1つのみ生成される

{note}
If your service is @flash@, @flow@ or @conversation@ scoped it must implement @java.io.Serializable@ and can only be used in the context of a [Web Flow|guide:webflow]
{note}

To enable one of the scopes, add a static scope property to your class whose value is one of the above, for example

{code:java}
static scope = "flow"
{code}
