As discussed in the section on [Optimistic and Pessimistic Locking|guide:locking], by default GORM uses optimistic locking and automatically injects a @version@ property into every class which is in turn mapped to a @version@ column at the database level.

If you're mapping to a legacy schema that doesn't have version columns (or there's some other reason why you don't want/need this feature) you can disable this with the @version@ method:

{code:java}
class Person {
    ...
    static mapping = {
        table 'people'
        version false
    }
}
{code}

{note}
If you disable optimistic locking you are essentially on your own with regards to concurrent updates and are open to the risk of users losing data (due to data overriding) unless you use [pessimistic locking|guide:locking]
{note}

h4. Version columns types

By default Grails maps the @version@ property as a @Long@ that gets incremented by one each time an instance is updated. But Hibernate also supports using a @Timestamp@, for example:

{code:java}
import java.sql.Timestamp

class Person {

    ...
    Timestamp version

    static mapping = {
        table 'people'
    }
}
{code}

There's a slight risk that two updates occurring at nearly the same time on a fast server can end up with the same timestamp value but this risk is very low. One benefit of using a @Timestamp@ instead of a @Long@ is that you combine the optimistic locking and last-updated semantics into a single column.
