An example of the [delete|domainClasses] method can be seen below:

{code}
def p = Person.get(1)
p.delete()
{code}

As with saves, Hibernate will use transactional write-behind to perform the delete; to perform the delete in-place you can use the @flush@ argument:

{code}
def p = Person.get(1)
p.delete(flush: true)
{code}

Using the @flush@ argument lets you catch any errors that occur during a delete. A common error that may occur is if you violate a database constraint, although this is normally down to a programming or schema error. The following example shows how to catch a @DataIntegrityViolationException@ that is thrown when you violate the database constraints:

{code:java}
def p = Person.get(1)

try {
    p.delete(flush: true)
}
catch (org.springframework.dao.DataIntegrityViolationException e) {
    flash.message = "Could not delete person ${p.name}"
    redirect(action: "show", id: p.id)
}
{code}

Note that Grails does not supply a @deleteAll@ method as deleting data is discouraged and can often be avoided through boolean flags/logic.

If you really need to batch delete data you can use the [executeUpdate|domainClasses] method to do batch DML statements:

{code}
Customer.executeUpdate("delete Customer c where c.name = :oldName",
                       [oldName: "Fred"])
{code}

