{hidden}Grails applications are deployed as Web Application Archives (WAR files), and Grails includes the [war|commandLine] command for performing this task:{hidden}
GrailsアプリケーションはWebアプリケーションアーカイブ（WARファイル）としてデプロイされます。Grailsにはアーカイブを作成するための[war|commandLine]コマンドがあります:

{code}
grails war
{code}

{hidden}This will produce a WAR file under the @target@ directory which can then be deployed as per your container's instructions.{hidden}
コンテナにデプロイ可能なWarファイルが@target@ディレクトリ以下に生成されます。

{hidden}Unlike most scripts which default to the @development@ environment unless overridden, the @war@ command runs in the @production@ environment by default. You can override this like any script by specifying the environment name, for example:{hidden}
他のほとんどのスクリプトと違い、@war@コマンドでは、環境が@development@にオーバーライドされて、@production@がデフォルトになります。他のスクリプトと同じく環境名を指定することで変更可能です。

{code}
grails dev war
{code}

{warning}
{hidden}NEVER deploy Grails using the [run-app|commandLine] command as this command sets Grails up for auto-reloading at runtime which has a severe performance and scalability implications {hidden}
Grailsを本番運用する際はWARをデプロイしてください。[run-app|commandLine]コマンドでの運用は基本的に自動リロードなどが設定されているため、パフォーマンスやスケーラビリティに影響します。
{warning}

{hidden}When deploying Grails you should always run your containers JVM with the @-server@ option and with sufficient memory allocation. A good set of VM flags would be:{hidden}
Grailsをデプロイする場合は、@-server@オプションと十分なメモリを割り当てて、Webコンテナを動作させましょう。JVM起動オプションの良い設定は次のようになります:

{code}
-server -Xmx512M -XX:MaxPermSize=256m
{code}
