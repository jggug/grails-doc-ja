{hidden}Grails ships with a lot of command line functionality out of the box that you may find useful in your own scripts (See the command line reference in the reference guide for info on all the commands). Of particular use are the [compile|commandLine], [package|commandLine] and [bootstrap|commandLine] scripts.{hidden}
Grailsは独自のスクリプトでも使用できる便利なコマンドライン機能を提供しています（コマンドに関する詳細はリファレンスガイド内のコマンドラインリファレンスを参照してください）。特に[compile|commandLine]、[package|commandLine]および[bootstrap|commandLine]スクリプトはよく利用されます。

{hidden}The [bootstrap|commandLine] script for example lets you bootstrap a Spring [ApplicationContext|api:org.springframework.context.ApplicationContext] instance to get access to the data source and so on (the integration tests use this):{hidden}
[bootstrap|commandLine]スクリプトはデータソースなどを参照可能にするSpringの[ApplicationContext|api:org.springframework.context.ApplicationContext]インスタンスを生成します。(統合テストはこの機能を使っています):

{code}

includeTargets << grailsScript("_GrailsBootstrap")

target ('default': "Database stuff") {
    depends(configureProxy, packageApp, classpath, loadApp, configureApp)

    Connection c
    try {
        c = appCtx.getBean('dataSource').getConnection()
        // do something with connection
    }
    finally {
        c?.close()
    }
}
{code}

h3. 他のスクリプトからターゲットを取り出す {hidden}Pulling in targets from other scripts {hidden}

{hidden}Gant lets you pull in all targets (except "default") from another Gant script. You can then depend upon or invoke those targets as if they had been defined in the current script. The mechanism for doing this is the @includeTargets@ property. Simply "append" a file or class to it using the left-shift operator:{hidden}
Gantはターゲットを他のGantスクリプトから取り込むことができます。取り込んだターゲットは、あたかも現在のスクリプトで定義されているかのように実行することができます。この仕組みは@includeTargets@プロパティにより実現されます。単純に左シフト演算子でファイル又は使用するクラスを追加します:

{code}
includeTargets << new File("/path/to/my/script.groovy")
includeTargets << gant.tools.Ivy
{code}
{hidden}Don't worry too much about the syntax using a class, it's quite specialised. If you're interested, look into the Gant documentation.{hidden}
クラスを使用している構文はGantのルールに従って記述されたクラスを使用しています。もし興味があればGantのドキュメントを参照して下さい。

h3. Core Grailsターゲット {hidden}Core Grails targets {hidden}

{hidden}As you saw in the example at the beginning of this section, you use neither the File- nor the class-based syntax for @includeTargets@ when including core Grails targets. Instead, you should use the special @grailsScript()@ method that is provided by the Grails command launcher (note that this is not available in normal Gant scripts, just Grails ones).{hidden}
この章の冒頭の例でお見せしたように、Core Grailsターゲットを含める際に利用する@includeTargets@では、ファイルベース構文、クラスベース構文のどちらも使用しません。代わりに、Grailsコマンドランチャが提供している@grailsScript()@という特別なメソッドを使用します（このメソッドはGrails専用であり、通常のGantでは利用できません）。

{hidden}The syntax for the @grailsScript()@ method is pretty straightforward: simply pass it the name of the Grails script to include, without any path information. Here is a list of Grails scripts that you could reuse:{hidden}
@grailsScript()@メソッドの構文は、単に含めたいGrailsスクリプトの名称を渡すだけです。以下に再利用できるGrailsスクリプトの一覧を示します:
{hidden}
{table}
 *Script* | *Description*
 \_GrailsSettings | You really should include this! Fortunately, it is included automatically by all other Grails scripts except \_GrailsProxy, so you usually don't have to include it explicitly.
 \_GrailsEvents | Include this to fire events. Adds an @event(String eventName, List args)@ method. Again, included by almost all other Grails scripts.
 \_GrailsClasspath | Configures compilation, test, and runtime classpaths. If you want to use or play with them, include this script. Again, included by almost all other Grails scripts.
 \_GrailsProxy | If you don't have direct access to the internet and use a proxy, include this script to configure access through your proxy.
 \_GrailsArgParsing | Provides a @parseArguments@ target that does what it says on the tin: parses the arguments provided by the user when they run your script. Adds them to the @argsMap@ property.
 \_GrailsTest | Contains all the shared test code. Useful if you want to add any extra tests.
 \_GrailsRun | Provides all you need to run the application in the configured servlet container, either normally (@runApp@/@runAppHttps@) or from a WAR file (@runWar@/@runWarHttps@).
 {table}
{hidden}

{table}
 *スクリプト* | *説明*
 \_GrailsSettings | Grailsの設定などを読み込むスクリプト。このスクリプトは他のスクリプト（_GrailsProxyなど）で自動的にインクルードされているので、通常は明示的にインクルードする必要はありません。
 \_GrailsEvents | イベントトリガーを実装するためのメソッド（@event(String eventName, List args)@）を使用するには、これをインクルードする必要があります。このスクリプトもほぼ全てのGrailsスクリプトでインクルードされています。
 \_GrailsClasspath | コンパイル、テスト、およびランタイムのクラスパスを設定します。このスクリプトもほぼ全ての Grailsスクリプトでインクルードされています。
 \_GrailsProxy | インターネットにアクセスする場合は、プロキシの解決をするためにこのスクリプトをインクルードして下さい。
 \_GrailsArgParsing | @parseArguments@ターゲットはその名の通り解析する機能を提供します。スクリプトを実行する際に指定した引数を解析します。@argsMap@プロパティにそれらの設定の追加します。
 \_GrailsTest | すべてのテスト実行に使用するコードが含まれています。他の種類のテストを追加する際に便利です。
 \_GrailsRun | アプリケーションを起動させるために必要な機能を提供します。通常は（@runApp/runAppHttps@）から、またはWARファイル（@runWar/runWarHttps@）から実行します。
{table}

{hidden}There are many more scripts provided by Grails, so it is worth digging into the scripts themselves to find out what kind of targets are available. Anything that starts with an "\_" is designed for reuse.{hidden}
Grailsではもっと多くのスクリプトが提供されていますので、どんな種類のターゲットが利用可能かを調べてみる価値があるでしょう。"_"で始まっているものはすべて再利用されることを考慮してデザインされています。

h3. スクリプトアーキテクチャ {hidden}Script architecture {hidden}

{hidden}You maybe wondering what those underscores are doing in the names of the Grails scripts. That is Grails' way of determining that a script is _internal_, or in other words that it has not corresponding "command". So you can't run "grails \_grails-settings" for example. That is also why they don't have a default target.{hidden}
アンダースコアで始まるGrailsスクリプトは、何を示しているものかを説明すると、それらはコマンドではなく、他のスクリプトから利用されるスクリプト群として認識されます。なので、それらのスクリプト（内部スクリプト）はデフォルトターゲットを持っておらず、スクリプトは実行できません。

{hidden}Internal scripts are all about code sharing and reuse. In fact, we recommend you take a similar approach in your own scripts: put all your targets into an internal script that can be easily shared, and provide simple command scripts that parse any command line arguments and delegate to the targets in the internal script. For example if you have a script that runs some functional tests, you can split it like this:{hidden}
内部スクリプトは共有して再利用するために存在します。実際に独自のスクリプトを書く場合は、同等の手法をとることをお勧めします。簡単に共有できるターゲットは内部スクリプトにすべて置き、コマンドライン引数を解析して、内部スクリプト内のターゲットを呼び出すだけのコマンドスクリプトを提供します。例えば、いくつかのファンクショナルテストを行うスクリプトがあるという場合、以下のように分割できます。

{code}
./scripts/FunctionalTests.groovy:

includeTargets << new File("${basedir}/scripts/_FunctionalTests.groovy")

target(default: "Runs the functional tests for this project.") {
    depends(runFunctionalTests)
}

./scripts/_FunctionalTests.groovy:

includeTargets << grailsScript("_GrailsTest")

target(runFunctionalTests: "Run functional tests.") {
    depends(...)
    ...
}
{code}

{hidden}Here are a few general guidelines on writing scripts:{hidden}
以下にスクリプトを書く際のガイドラインを示します:

{hidden}
* Split scripts into a "command" script and an internal one.
* Put the bulk of the implementation in the internal script.
* Put argument parsing into the "command" script.
* To pass arguments to a target, create some script variables and initialise them before calling the target.
* Avoid name clashes by using closures assigned to script variables instead of targets. You can then pass arguments direct to the closures.
{hidden}
* スクリプトを"コマンドスクリプト"と"内部スクリプト"に分割します。
* 実装の大部分は"内部スクリプト"で行います。
* 引数の解析は"コマンドスクリプト"で行います。
* ターゲットに引数を渡すには、いくつかのスクリプト変数を作成し、ターゲットを呼び出す前にそれらを初期化します。
* ターゲットの代わりにスクリプト変数に割り当てられているクロージャを使用して名前の衝突を避けるようにします。そうすれば、引数をクロージャに直接渡すことができます。
