h4. ビュー内でのメッセージ読み込み (Reading Messages in the View)

The most common place that you need messages is inside the view. To read messages from the view just use the [message|tags] tag:

メッセージを使うもっとも一般的な場所はビューの中です。
ビューでメッセージを取得するには単に[message|tags]タグを使います。

{code:xml}
<g:message code="my.localized.content" />
{code}

As long as you have a key in your @messages.properties@ (with appropriate locale suffix) such as the one below then Grails will look-up the message:

@messages.properties@ (および末尾に該当ロケールが付いている) ファイル内にキーがあれば
以下のようなメッセージが取得できます。

{code:java}
my.localized.content=Hola, Me llamo John. Hoy es domingo.
{code}

Note that sometimes you may need to pass arguments to the message. This is also possible with the @message@ tag:

時にはメッセージに引数が必要な場合があります。
この場合でも [message] タグが使用できます。

{code:xml}
<g:message code="my.localized.content" args="${ ['Juan', 'lunes'] }" />
{code}

And then use positional parameters in the message:

これらは該当メッセージ内で位置パラメータにて解決されます。

{code:java}
my.localized.content=Hola, Me llamo {0}. Hoy es {1}.
{code}


h4. コントローラ／タグライブラリ内でのメッセージ読み込み (Reading Messages in Controllers and Tag Libraries)

Since you can invoke tags as methods from controllers it is also trivial to read messages within in a controller:

コントローラーからタグをメソッドとして呼び出す場合、たとえば :

{code:java}
def show = {
	def msg = message(code:"my.localized.content", args:['Juan', 'lunes'])
}
{code}

The same technique can be used on [tag libraries|guide:taglibs], but note if your tag library has a different
[namespace|guide:namespaces] then you will need to @g.@ prefix:

同じ方法が[tag libraries|guide:taglibs]でも使えます。
もしタグライブラリで異なる[namespace|guide:namespaces] を使っている場合は @g.@ を前に付けます。

{code:java}
def myTag = { attrs, body ->
	def msg = g.message(code:"my.localized.content", args:['Juan', 'lunes'])
}
{code}
