REST is not really a technology in itself, but more an architectural pattern. REST is very simple and just involves using plain XML or JSON as a communication medium, combined with URL patterns that are "representational" of the underlying system, and HTTP methods such as GET, PUT, POST and DELETE.

Each HTTP method maps to an action type. For example GET for retrieving data, PUT for creating data, POST for updating and so on. In this sense REST fits quite well with [CRUD|guide:scaffolding].

h4. URL patterns

The first step to implementing REST with Grails is to provide RESTful [URL mappings|guide:urlmappings]:

{code:java}
static mappings = {
   "/product/$id?"(resource:"product")
}
{code}

This maps the URI @/product@ onto a @ProductController@. Each HTTP method such as GET, PUT, POST and DELETE map to unique actions within the controller as outlined by the table below:

{table}
Method     | Action
@GET@      | @show@
@PUT@      | @update@
@POST@     | @save@
@DELETE@   | @delete@
{table}

In addition, Grails provides automatic XML or JSON marshalling for you.

You can alter how HTTP methods are handled by using URL Mappings to [map to HTTP methods|guide:mappingHTTP]:

{code:java}
"/product/$id"(controller: "product") {
    action = [GET: "show", PUT: "update", DELETE: "delete", POST: "save"]
}
{code}

However, unlike the @resource@ argument used previously, in this case Grails will not provide automatic XML or JSON marshalling unless you specify the @parseRequest@ argument:

{code:java}
"/product/$id"(controller: "product", parseRequest: true) {
    action = [GET: "show", PUT: "update", DELETE: "delete", POST: "save"]
}
{code}

h4. HTTP Methods

In the previous section you saw how you can easily define URL mappings that map specific HTTP methods onto specific controller actions. Writing a REST client that then sends a specific HTTP method is then easy (example in Groovy's HTTPBuilder module):

{code}
import groovyx.net.http.*
import static groovyx.net.http.ContentType.JSON

def http = new HTTPBuilder("http://localhost:8080/amazon")

 http.request(Method.GET, JSON) {
     url.path = '/book/list'
     response.success = { resp, json ->
         for (book in json.books) {
             println book.title
         }
     }
 }
{code}

Issuing a request with a method other than @GET@ or @POST@ from a regular browser is not possible without some help from Grails. When defining a [form|tags] you can specify an alternative method such as @DELETE@:

{code}
<g:form controller="book" method="DELETE">
    ..
</g:form>
{code}

Grails will send a hidden parameter called @_method@, which will be used as the request's HTTP method. Another alternative for changing the method for non-browser clients is to use the @X-HTTP-Method-Override@ to specify the alternative method name.

h4. XML Marshalling - Reading

The controller can use Grails' [XML marshalling|guide:xmlAndJSON] support to implement the GET method:

{code:java}
import grails.converters.XML

class ProductController {
    def show() {
        if (params.id && Product.exists(params.id)) {
            def p = Product.findByName(params.id)
            render p as XML
        }
        else {
            def all = Product.list()
            render all as XML
        }
    }
    ..
}
{code}

If there is an @id@ we search for the @Product@ by name and return it, otherwise we return all Products. This way if we go to @/products@ we get all products, otherwise if we go to @/product/MacBook@ we only get a MacBook.

h4. XML Marshalling - Updating

To support updates such as @PUT@ and @POST@ you can use the [params|controllers] object which Grails enhances with the ability to read an incoming XML packet. Given an incoming XML packet of:

{code:xml}
<?xml version="1.0" encoding="ISO-8859-1"?>
<product>
    <name>MacBook</name>
    <vendor id="12">
        <name>Apple</name>
     </vender>
</product>
{code}

you can read this XML packet using the same techniques described in the [Data Binding|guide:dataBinding] section, using the [params|controllers] object:

{code:java}
def save() {
    def p = new Product(params.product)

    if (p.save()) {
        render p as XML
    }
    else {
        render p.errors
    }
}
{code}

In this example by indexing into the @params@ object using the @product@ key we can automatically create and bind the XML using the @Product@ constructor. An interesting aspect of the line:

{code:java}
def p = new Product(params.product)
{code}

is that it requires no code changes to deal with a form submission that submits form data, or an XML request, or a JSON request.

{note}
If you require different responses to different clients (REST, HTML etc.) you can use [content negotation|guide:contentNegotiation]
{note}

The @Product@ object is then saved and rendered as XML, otherwise an error message is produced using Grails' [validation|guide:validation] capabilities in the form:

{code:xml}
<error>
   <message>The property 'title' of class 'Person' must be specified</message>
</error>
{code}

h4. REST with JAX-RS

There also is a [JAX-RS Plugin|http://grails.org/plugin/jaxrs] which can be used to build web services based on the Java API for RESTful Web Services ([JSR 311: JAX-RS|http://jcp.org/en/jsr/summary?id=311]).
