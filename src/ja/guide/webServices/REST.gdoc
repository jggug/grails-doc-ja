RESTは本来SOAPのようなプロトコルではなく、アーキテクチャスタイルです。RESTは非常に単純です。簡素なXMLやJSONを通信媒体に用いて、基本的なシステムとGET、PUT、POSTおよびDELETEといったHTTPメソッドを「表現する」URLパターンを組み合わせています。

それぞれのHTTPメソッドは異なるアクションにマップします。例えば、GETはデータ検索、PUTはデータ作成、POSTは更新などとマップします。このため、RESTは[CRUD|guide:scaffolding]と非常によく適合します。

h4. URLパターン

GrailsでRESTを実装する１つ目のやり方として、以下のようにRESTfulな[URLマッピング|guide:urlmappings]を提供する方法があります。

{code:java}
static mappings = {
   "/product/$id?"(resource:"product")
}
{code}

この例では、@/product@というURIを@ProductController@に紐付けます。GET、PUT、POSTおよびDELETEといった各HTTPメソッドは、下表に示したようにコントローラ内の一意のアクションに紐付きます。

{table}
メソッド     | アクション
@GET@      | @show@
@PUT@      | @update@
@POST@     | @save@
@DELETE@   | @delete@
{table}

さらにGrailsではXMLまたJSONでの自動マーシャリングも提供しています。

[HTTPメソッドをマップ|guide:mappingHTTP]する仕組みを使用して、URLマッピングをHTTPメソッドにハンドルすることが可能です:

{code:java}
"/product/$id"(controller: "product") {
    action = [GET: "show", PUT: "update", DELETE: "delete", POST: "save"]
}
{code}

ただし、この場合は、先の@resource@と違い、@parseRequest@変数をURLマッピングに指定しないと、XMLやJSONのマーシャリングを自動的には行いません:

{code:java}
"/product/$id"(controller: "product", parseRequest: true) {
    action = [GET: "show", PUT: "update", DELETE: "delete", POST: "save"]
}
{code}

h4. HTTPメソッド

前のセクションでは、特定のHTTPメソッドを特定のコントローラのアクションにマップするURLマッピングが、どれほど簡単に定義できるかを見ました。特定のHTTPメソッドを送信するRESTクライアントを作成するのも簡単です。（GroovyのHTTPBuilderモジュールの例）:

{code}
import groovyx.net.http.*
import static groovyx.net.http.ContentType.JSON

def http = new HTTPBuilder("http://localhost:8080/amazon")

 http.request(Method.GET, JSON) {
     url.path = '/book/list'
     response.success = { resp, json ->
         for (book in json.books) {
             println book.title
         }
     }
 }
{code}

通常のブラウザから@GET@または@POST@以外のメソッドの要求を発行するためには、Grailsの援助が必要となります。[フォーム|tags]を定義する時に、@DELETE@のような別のメソッドを指定できます。

{code}
<g:form controller="book" method="DELETE">
    ..
</g:form>
{code}

Grailsは@_method@というhiddenパラメータを送信し、これをHTTPメソッドの要求として使用します。ブラウザ以外のクライアントでメソッドを変更するためには、@X-HTTP-Method-Override@を使用して代替メソッド名を指定します。

h4. XMLマーシャリング - 読み取り

Grailsの[XMLマーシャリングの機能|guide:xmlAndJSON]をコントローラで使用して、GETメソッドの実装できます。

{code:java}
import grails.converters.XML

class ProductController {
    def show() {
        if (params.id && Product.exists(params.id)) {
            def p = Product.findByName(params.id)
            render p as XML
        }
        else {
            def all = Product.list()
            render all as XML
        }
    }
    ..
}
{code}

この例では、検索した内容が存在した場合はその@Product@を返し、無い場合は全てを返します。この方法で、@/product@にアクセスすると全リストが返り、@/product/MacBook@等指定して存在した場合は、その@Product@を返します。

h4. XMLマーシャリング - 更新

@PUT@および@POSTの@ような更新をサポートするには、Grailsの[params|controllers]オブジェクトを利用してXMLを読み取ることができます。次のようなXMLを受信したとします。

{code:xml}
<?xml version="1.0" encoding="ISO-8859-1"?>
<product>
    <name>MacBook</name>
    <vendor id="12">
        <name>Apple</name>
     </vender>
</product>
{code}

このXMLを読み込むには、[データバインディング|guide:dataBinding]の章に記述された内容と同じく、[params|controllers]オブジェクトから取得することができます:

{code:java}
def save() {
    def p = new Product(params.product)

    if (p.save()) {
        render p as XML
    }
    else {
        render p.errors
    }
}
{code}

この例では、@params@オブジェクトから@product@キーを使用して取得し、@Product@クラスのコンストラクタに渡すことで自動的にバインドします:

{code:java}
def p = new Product(params.product)
{code}

興味深い点は、JSONリクエストまたはXMLリクエストの対応は、通常のフォーム送信の対応とそれほど変わりがないということです。

{note}
異なったクライアント（REST、HTMLなど）に対する異なった応答が必要な場合は、[コンテントネゴシエーション|guide:contentNegotiation]を使用することができます。
{note}

@Product@オブジェクトが保存され、XMLとしてレンダリングされます。問題が起きた場合は、Grailsの[バリデーション|guide:validation]機能によってエラーメッセージが返信されます。
{code:xml}
<error>
   <message>The property 'title' of class 'Person' must be specified</message>
</error>
{code}

h4.  JAX-RSでのREST

RESTful Webサービス用のJava APIをベースとしたRESTを、[JAX-RSプラグイン|http://grails.org/plugin/jaxrs]構築することも可能です。  ([JSR 311: JAX-RS|http://jcp.org/en/jsr/summary?id=311])
